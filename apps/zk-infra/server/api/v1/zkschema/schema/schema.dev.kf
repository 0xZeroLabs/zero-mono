database zero;

use zero {
    registry_address: '',
    chain: 'sepolia'
} as zero_mainnet;

// Merge credentials into credentials data, or make it make sense

table credentials {
    // omid address
    id text primary key minlen(40) maxlen(42),
    // zkhash
    foreign key (credential_data_id) references credential_data(id) on delete set_null,
    credential_data_id text notnull unique,
    // main data
    issuer text notnull,
    issuance_date text notnull,
    expiration_date text notnull default(null)
}

table credential_data {
    // zkhash
    id text primary key unique,
    // omid address
    foreign key (credential_id) references credentials(id) on delete set_null,
    credential_id text notnull,
    // main data
    type text notnull,
    status text notnull,
    encrypted_data blob notnull,
    algorithm text notnull,
    verification_date text notnull
}

procedure create_credentials($id text, $credential_data_id text, $issuer text, $issuance_date text, $expiration_date text) public {
  INSERT INTO credentials (id, credential_data_id, issuer, issuance_date, expiration_date)
  VALUES ($id, $credential_data_id, $issuer, $issuance_date, $expiration_date);
}

procedure get_credentials($credential_id text) public view returns table(id text, credential_data_id text, issuer text, issuance_date text, expiration_date text) {
  return SELECT id, credential_data_id, issuer, issuance_date, expiration_date
  FROM credentials
  WHERE id=$credential_id;
}

procedure get_credential_data($credential_data_id text) public view returns (id text, credential_id text, type text, status text, encrypted_data blob, algorithm text, verification_date text) {
  for $row in SELECT id, credential_id, type, status, encrypted_data, algorithm, verification_date
  FROM credential_data
  WHERE id=$credential_data_id {
    return $row.id, $row.credential_id, $row.type, $row.status, $row.encrypted_data, $row.algorithm, $row.verification_date;
  }

  ERROR('data not found');
}